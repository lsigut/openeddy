% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_handling.R
\name{read_EddyPro}
\alias{read_EddyPro}
\title{Read EddyPro Files with Units}
\usage{
read_EddyPro(
  path,
  start = NULL,
  end = NULL,
  skip = 1,
  fileEncoding = "UTF-8",
  format = "\%Y-\%m-\%d \%H:\%M",
  shift.by = NULL,
  allow_gaps = TRUE,
  pattern = "\\\\.[Cc][Ss][Vv]$"
)
}
\arguments{
\item{path}{A string. The path to directory with EddyPro full output. Other
than CSV files are ignored.}

\item{start, end}{A value specifying the first (last) value of the column
"timestamp" in outputted data frame. If \code{NULL}, \code{\link[=min]{min()}}
(\code{\link[=max]{max()}}) of date-time values from "timestamp" column across all
input files is used. If numeric, the value specifies the year for which the
first (last) date-time value will be generated, considering given time
interval (automatically detected from "timestamp" column) and convention of
assigning of measured records to the end of the time interval. Otherwise,
character representation of specific date-time value is expected in given
\code{format} and timezone "GMT".}

\item{skip}{An integer. The number of lines to skip in the input file before
reading data.}

\item{fileEncoding}{A character string. If non-empty, declares the encoding
used on a file (not a connection) so the character data can be re-encoded.
See \code{\link[=read.table]{read.table()}} for further details.}

\item{format}{A character string. Format of \code{start} (\code{end}) if
provided as a character string.}

\item{shift.by}{A numeric value specifying the time shift (in seconds) to be
applied to the date-time information.}

\item{allow_gaps}{A logical value. If \code{TRUE}, date-time information does
not have to be regular but time differences must be multiples of
automatically detected time interval.}

\item{pattern}{A character string. A \link[=regexp]{regular expression} \code{\link[=grep]{grep()}}
\code{pattern} identifying EddyPro full output files in the \code{path} folder.}
}
\value{
A data frame is produced with additional attributes \code{varnames}
and \code{units} assigned to each respective column.
}
\description{
Read single or multiple EddyPro full output files at given path and merge
them together along generated regular date-time sequence.
}
\details{
This utility function is adapted to EddyPro full output file structure but
allows to change selected useful arguments that have preset default values.
Column "timestamp" with date-time information is constructed based on "date"
and "time" columns and converted into class \code{POSIXct}. It also assures
that date-time sequence is regular and equidistant.

In case that multiple files are present in the \code{path}, function merges
them vertically (along generated complete timestamp) and discards rows with
duplicated date-time values. All original columns across all files are kept.
The order of variables follows that of the first file loaded (note that file
ordering in \code{path} is alphabetical not chronological) and additional
variables are appended if present in the following files. To assure
compatibility with older EddyPro versions, old column name "max_speed" is
renamed to "max_wind_speed" if present.

If you want to specify \code{start} and \code{end} arguments as strings and
you change also default \code{shift.by} value, \code{start} and \code{end}
arguments need to be adopted accordingly to account for that change. E.g. if
\code{shift.by = -900}, then \verb{start = "2019-12-31 21:15:00", end = "2019-12-31 23:15:00"} instead of \verb{start = "2019-12-31 21:30:00", end = "2019-12-31 23:30:00"} for half-hourly data.

Note that \code{skip} and \code{fileEncoding} arguments must be valid across
all files, otherwise the function will not execute correctly.
}
\examples{
# examples of different patterns for file selection
xx <- c("CZ-BK1_2024_eddy.csv", "data.CSV", "CZ-BK1.txt")

# select file names ending with ".csv" (case insensitive)
grep("\\\\.[Cc][Ss][Vv]$", xx, value = TRUE)

# select file names starting with CZ-BK1 site abbreviation
grep("^CZ-BK1", xx, value = TRUE)

# select CSV file names starting with CZ-BK1 site abbreviation
# - note the usage of ".*" to combine above patterns
grep("^CZ-BK1.*\\\\.[Cc][Ss][Vv]$", xx, value = TRUE)


}
