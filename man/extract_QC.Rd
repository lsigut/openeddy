% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quality_checking.R
\name{extract_QC}
\alias{extract_QC}
\title{Extract Quality Control Information}
\usage{
extract_QC(
  x,
  filters = c("spikesHF", "ampres", "dropout", "abslim", "skewkurt_hf", "skewkurt_sf",
    "discont_hf", "discont_sf", "timelag_hf", "timelag_sf", "attangle", "nonsteady",
    "missfrac", "scf", "wresid", "runs", "lowcov", "var", "humid", "LI7200", "LI7500"),
  rotation = c("double", "planar fit"),
  prefix = "[8]",
  split = "[/]",
  missfrac_thr = c(0.1, 0.1),
  scf_thr = c(2, 3),
  w_unrot_thr = c(0.35, 0.35),
  w_rot_thr = c(0.1, 0.15),
  lowcov_thr = c(-0.005, 0.005),
  ts_var_thr = c(2, 2),
  RH_thr = c(95, 95),
  LI7200_signal_thr = c(90, 80),
  LI7500_signal_thr = c(90, 80),
  simplify = TRUE
)
}
\arguments{
\item{x}{A data frame with column names representing required variables.}

\item{filters}{A character vector. A full set of supported filters to extract
(default) or its subset.}

\item{rotation}{A character string. Specifies the type of coordinate rotation
applied. Allowed values are "double" and "planar fit". Can be abbreviated.}

\item{prefix}{Character string containing a \link{regular expression}
identifying the prefix of coded values. See \code{\link[=extract_coded]{extract_coded()}}.}

\item{split}{Character string containing a \link{regular expression}
identifying the separator of variable names in \code{units} attribute. See
\code{\link[=extract_coded]{extract_coded()}}.}

\item{missfrac_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for fraction of missing high frequency data within averaging
period if \code{filters} include \code{"missfrac"}. \code{\link[=apply_thr]{apply_thr()}} flags the
records higher than the given thresholds.}

\item{scf_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for spectral correction factor if \code{filters} include \code{"scf"}.
\code{\link[=apply_thr]{apply_thr()}} flags the records higher than the given thresholds.}

\item{w_unrot_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for absolute value of unrotated \emph{w} if \code{filters} include
\code{"wresid"} and \code{rotation = "double"}. \code{\link[=apply_thr]{apply_thr()}} flags the
records higher than the given thresholds.}

\item{w_rot_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for absolute value of rotated \emph{w} if \code{filters} include
\code{"wresid"} and \code{rotation = "planar fit"}. \code{\link[=apply_thr]{apply_thr()}} flags the
records higher than the given thresholds.}

\item{lowcov_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for computed covariance if \code{filters} include \code{"lowcov"}.
\code{\link[=apply_thr]{apply_thr()}} flags the records between given thresholds.}

\item{ts_var_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for sonic temperature variance if \code{filters} include \code{"var"}.
\code{\link[=apply_thr]{apply_thr()}} flags the records higher than the given thresholds.}

\item{RH_thr}{A numeric vector with 2 non-missing values. Represents
thresholds for relative humidity if \code{filters} include \code{"humid"}.
\code{\link[=apply_thr]{apply_thr()}} flags the records higher than the given thresholds.}

\item{LI7200_signal_thr, LI7500_signal_thr}{A numeric vector with 2
non-missing values. Represents thresholds for signal strength provided by
LI-COR 7200 or 7500 if \code{filters} include \code{"LI7200"} or \code{"LI7500"}.
\code{\link[=apply_thr]{apply_thr()}} flags the records lower than the given thresholds.}

\item{simplify}{A logical value. Should be soft (suffix \code{"_sf"} in EddyPro
column name) and hard (suffix \code{"_hf"} in EddyPro column name) flags
extracted from EddyPro coded variables combined? See
\code{\link[=extract_coded]{extract_coded()}}.}
}
\value{
A data frame. Each column has attributes \code{"varnames"} and \code{"units"}.
}
\description{
QC information stored in columns of data frame \code{x} is extracted and
interpreted in respect to instruments or individual fluxes.
}
\details{
The data frame \code{x} is expected to have certain properties. It is required
that it contains column names according to considered QC filters. In the case
of coded variables, attribute \code{units} containing the format of coded variable
is required to extract the coded QC information. See
\code{\link[=extract_coded]{extract_coded()}}.

Extracted QC information can be relevant to fluxes measured by given
instrument(s), specific flux or is applicable to all fluxes. See 'Naming
Strategy' below. Results are reported according to the QC scheme using QC
flag range 0 - 2. In cases when extracted variable is checked against
thresholds, \code{\link[=apply_thr]{apply_thr()}} is used to assign flag values.

Check of missing data in averaging period (missfrac) takes into account
number of valid records used for given averaging period. This number is
further reduced by the sum of count of high frequency data spikes out of
variables needed to compute covariance. Covariance pairs are w, u (Tau); w,
ts (H); w, h2o (LE) and w, co2 (NEE).
}
\section{Extracted QC Checks}{
 Filters from coded EddyPro columns (thresholds
are set within EddyPro software). All of the filters extracted from coded
variables are not additive. \itemize{ \item spikesHF: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Despiking}{high frequency data spike percentage} in averaging period against thresholds.
HF in spikesHF means high frequency and distinguishes despiking done on raw
data (spikesHF) from despiking done on low frequency data (spikesLF; see
\code{\link[=despikeLF]{despikeLF()}}). \item ampres: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Amplituderesolution}{amplitude resolution} in the recorded data. \item dropout: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Dropouts}{drop-outs},
i.e. situations when the time series stays for “too long” on a value that
is far from the mean. \item abslim: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Absolutelimits}{absolute limits} when raw data are out of plausible range. \item skewkurt_sf and
skewkurt_hf: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Skewnessandkurtosis}{skewness and kurtosis} limits. If \code{simplify = TRUE}, skewkurt_sf and
skewkurt_hf are combined into skewkurt column instead. \item discont_sf and
discont_hf: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Discontinuities}{discontinuities}
that lead to semi-permanent changes in the time series. If \code{simplify = TRUE}, discont_sf and discont_hf are combined into discont column
instead. \item timelag_sf and timelag_hf: check of estimated
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Timelags}{timelags}
compared to the expected timelags. If \code{simplify = TRUE}, timelag_sf
and timelag_hf are combined into timelag column instead. \item attangle:
check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Angleofattack}{angle of attack}. \item nonsteady: check of
\href{https://www.licor.com/env/support/EddyPro/topics/despiking-raw-statistical-screening.html#Steadinessofhorizontalwind}{steadiness of horizontal wind}.}

Additional filters extracted from EddyPro output. The only additive test is
"wresid". \itemize{ \item missfrac: check of missing data in averaging
period against thresholds (default is 10\%). \item scf: check of spectral
correction factor against thresholds. \item wresid: check of mean unrotated
\emph{w} (double rotation) or \emph{w} residual (planar fit) against
thresholds. \item runs: check of runs with repeating values
(see \code{\link[=flag_runs]{flag_runs()}}). Flux values are rounded to 2 digits prior
checking runs, except for Tau. \item lowcov:
check of fluxes too close to zero (assuming issues during covariance
computation) \item var: check of variances against thresholds. \item humid:
check of relative humidity against thresholds. \item LI7200: check of CO2
and H2O signal strength against thresholds. \item LI7500: check of CO2
signal strength against thresholds (H2O signal not provided by the
instrument).}
}

\section{Content and Format of Columns}{
 \itemize{ \item For details
concerning coded variables see \code{\link[=extract_coded]{extract_coded()}}. \item
\code{"file_records"}: number of valid records found in the raw file \item
\code{"used_records"}: number of valid records used at given averaging period.
This number can also contain high frequency spikes that should be excluded.
\item \verb{"u_spikes", "ts_spikes", "h2o_spikes" and "co2_spikes"}: number of
high frequency spikes detected at given averaging period in respective
variable. Values can be set to 0 if \code{"used_records"} already accounts for
spikes. \item \verb{"Tau_scf", "H_scf", "LE_scf" and "co2_scf"}: spectral
correction factor for given flux. Values are above 1. \item \verb{"w_unrot", "w_rot"}: unrotated and rotated \emph{w} wind component, respectively (should be
close to 0 m s-1).}
}

\section{Naming Strategy}{
 \strong{QC prefixes} (specifies which flux is
affected by that QC output): \itemize{ \item qc_SA: applicable to fluxes
relying only on SA (Tau, H) \item qc_GA: applicable to fluxes relying on GA
(LE, NEE); only GA issues considered \item qc_SAGA: applicable to fluxes
relying both on SA and GA (LE, NEE); SA and GA issues considered \item
qc_Tau, qc_H, qc_LE, qc_NEE: only applicable for the respective flux \item
qc_ALL: applicable to all fluxes}

\strong{QC suffixes} (specifies which QC check was performed to get this QC
output): \itemize{ \item See 'Extracted QC Checks' above for the complete
list.}
}

\section{Abbreviations}{
 \itemize{ \item QC: Quality Control \item SA: Sonic
Anemometer \item GA: Gas Analyzer \item Tau: Momentum flux [kg m-1 s-2]
\item H: Sensible heat flux [W m-2] \item LE: Latent heat flux [W m-2]
\item NEE: Net ecosystem exchange [umol m-2 s-1] \item u: Longitudinal
wind speed component [m s-1] \item w: Vertical wind speed component [m
s-1] \item ts: Sonic temperature [degC] \item h2o: H2O concentration
[mmol mol-1] \item co2: CO2 concentration [umol mol-1] \item RH:
relative humidity [\%]}.
}

\section{References}{
 Foken, T., Wichura, B., 1996. Tools for quality
assessment of surface-based flux measurements. Agric. For. Meteorol. 78,
83–105. \url{https://doi.org/10.1016/0168-1923(95)02248-1}

Vickers, D. and Mahrt, L., 1997. Quality Control and Flux Sampling Problems
for Tower and Aircraft Data. Journal of Atmospheric and Oceanic Technology,
14(3), 512-526.
\url{https://doi.org/10.1175/1520-0426(1997)014<0512:QCAFSP>2.0.CO;2}

Mauder, M., Cuntz, M., Drue, C., Graf, A., Rebmann, C., Schmid, H.P.,
Schmidt, M., Steinbrecher, R., 2013. A strategy for quality and uncertainty
assessment of long-term eddy-covariance measurements. Agric. For. Meteorol.
169, 122-135. \url{https://doi.org/10.1016/j.agrformet.2012.09.006}

McGloin, R., Sigut, L., Havrankova, K., Dusek, J., Pavelka, M., Sedlak, P.,
2018. Energy balance closure at a variety of ecosystems in Central Europe
with contrasting topographies. Agric. For. Meteorol. 248, 418-431.
\url{https://doi.org/10.1016/j.agrformet.2017.10.003}
}

\examples{
# filters are obtained by comparing thresholds directly with EddyPro column(s)
simple <- data.frame(co2_signal_strength_7500_mean = 100)
extract_QC(simple, LI7500_signal_thr = c(90, 80), filters = "LI7500")

# or columns need to be extracted from a coded column before comparison
# - this requires presence of units specifying the pattern for decoding
coded <- data.frame(attack_angle_hf = 81)
units(coded) <- "8aa"
extract_QC(coded, filters = "attangle")

# complete list of supported coded EddyPro columns with their data format
x <- data.frame(
  spikes_hf = 800000099,
  amplitude_resolution_hf = 800000099,
  drop_out_hf = 800000099,
  absolute_limits_hf = 800000099,
  skewness_kurtosis_hf = 800000099,
  skewness_kurtosis_sf = 800000099,
  discontinuities_hf = 800001199,
  discontinuities_sf = 800011199,
  timelag_hf = 80000,
  timelag_sf = 80100,
  attack_angle_hf = 81,
  non_steady_wind_hf = 80
)

# units specifying the pattern for decoding (provided by EddyPro)
units(x) <- c(
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8u/v/w/ts/co2/h2o/ch4/none",
  "8co2/h2o/ch4/none",
  "8co2/h2o/ch4/none",
  "8aa",
  "8U"
)

# run all filters based on coded EddyPro columns
extract_QC(
  x,
  filters = c("spikesHF", "ampres", "dropout", "abslim", "skewkurt_hf",
              "skewkurt_sf", "discont_hf", "discont_sf", "timelag_hf",
              "timelag_sf", "attangle", "nonsteady"))

# list of columns required by remaining filters
y <- data.frame(
  # columns needed for 'missfrac' filter
  file_records = 36000,
  used_records = 36000,
  w_spikes = 0,
  u_spikes = 0,
  ts_spikes = 0,
  h2o_spikes = 0,
  co2_spikes = 0,
  # columns needed for 'scf' filter
  Tau_scf = 0, H_scf = 0, LE_scf = 0, co2_scf = 0,
  # columns needed for 'wresid' filter (rotation = 'double')
  w_unrot = 0.001,
  # columns needed for 'runs' and 'lowcov' filters
  Tau = 0.2, H = 50, LE = 50, NEE = -5,
  # columns needed for 'var' filter
  ts_var = 6,
  # columns needed for 'humid' filter
  RH = 99,
  # columns needed for 'LI7200' filter
  # - columns for either LI7200 or LI7500 expected (the other filter skipped)
  co2_signal_strength_7200_mean = 85, h2o_signal_strength_7200_mean = 86,
  # columns needed for 'LI7500' filter
  co2_signal_strength_7500_mean = 95
)

# function extracts only available filters (coded columns are missing)
# - user is informed about skipped filters but no error or warning is issued
extract_QC(y)

}
\seealso{
\code{\link[=extract_coded]{extract_coded()}} and \code{\link[=apply_thr]{apply_thr()}}.
}
